name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang, msvc]
        exclude:
          - os: windows-latest
            compiler: clang
          - os: macos-latest
            compiler: msvc
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev nlohmann-json3-dev
        sudo apt-get install -y python3-dev python3-pip
        pip3 install pybind11
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake gtest nlohmann-json
        pip3 install pybind11
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake
        vcpkg install gtest nlohmann-json
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
    
    - name: Run benchmarks
      run: |
        cd build
        ./benchmark
    
    - name: Run demo
      run: |
        cd build
        ./demo

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install clang-format and cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format cppcheck
    
    - name: Check code formatting
      run: |
        find . -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror
    
    - name: Static analysis
      run: |
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/ include/

  python-bindings:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev nlohmann-json3-dev
        pip install pybind11 pytest
    
    - name: Build Python bindings
      run: |
        mkdir build
        cd build
        cmake .. -DPYBIND11_FOUND=ON
        make
    
    - name: Test Python bindings
      run: |
        cd build
        python -c "import nlformer_python; print('Python bindings work!')"

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev nlohmann-json3-dev
    
    - name: Build for performance testing
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make
    
    - name: Run performance benchmarks
      run: |
        cd build
        ./benchmark > benchmark_results.txt
        cat benchmark_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: build/benchmark_results.txt

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
    
    - name: Generate documentation
      run: |
        doxygen Doxyfile
    
    - name: Deploy documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html
